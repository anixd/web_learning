Упрощенный flow для работы с git

Основные правила:
- НИКОГДА не работаем в master/main и не вносим в нее изменения. В мастере живет только конечный результат. То, что уходит в production.
- для КАЖДОЙ задачи от master-а создается отдельная ветка. То есть, любая разработка ведется в отдельной ветке.

(Основные команды git -- внизу текста)

Итак, упрощенный flow в git:

1. Создаем новую ветку от master и переключаемся в нее:
* git branch new_branch_1
* git checkout new_branch_1

Эти две команды можно заменить одной (она сделает то же самое):
* git checkout -b new_branch_1

У checkout опция -b как раз и задает ту ветку, на которую мы будем checkout.

2. Дальше работаем с проектом, вносим именения и т.д.
Чтобы git запомнил изменения, нужно сделать 2 вещи:
- добавить их в индекс
- сохранить (сделать commit)

* git add .

После этого коммитим:

* git commit -m "some comments about current commit"

3. Окей. Закоммитили. Но пока что все эти изменения есть только локально.
Теперь нужно залить/запушить (push) изменения в текущей ветке на удаленный (remote) репозиторий:

* git push --set-upstream origin new_branch_1

Или, то же самое но короче:
* git push -u origin new_branch_1

--set-upstream origin (или -u origin) нужно указывать только во время первого пуша в текущую ветку.
Все дальнейшие разы можно писать просто git push.
git уже помнит с каким origin мы работаем.

4. Запушили, заебись. Теперь наша ветка new_branch_1 есть и локально, и удаленно.
Но теперь все наши наработки и изменения нужно влить (merge) в основную ветку, в master.
Да, merge может быть локальным. Но тогда в remote репозитории этого всего не будет, и остальные наши коллеги хуй увидят эти изменения.

Для этого идем на github, по ссылке которую нам вывел git push:

https://github.com/anixd/web_learning/pull/new/new_branch_1

и создаем pull request (запрос на слияние).

После этого кто-то ревьюит (review), или проверяет эти изменения, и мерджит нашу ветку в master.

В целом, это и весь flow. Да, это самый простой вариант. В реальных проектам он может быть сложнее, и сильно сложнее. Но общая логика примерно такая, как та, что описана.

----------

Основные команды git:

Перед началом работы с локальными репами, нужно сделать базовые локальные настройки git (юзер, его email):
* git config --global user.name "Vasya Pupkin"
* git config --global user.email "vasya@pupkin.com"

---

* git status
показывает состояния файлов в рабочем каталоге и индексе: какие файлы изменены, но не добавлены в индекс; какие ожидают коммита в индексе. Вдобавок к этому выводятся подсказки о том, как изменить состояние файлов.

---

* git branch
показывает ветки, которые есть в нашем локальном репе, и на какой мы находимся прямо сейчас

---

* git remote -v
Показывает инфу об удаленном (remote) репозитории

---

* git log
* git log -p
Отображает изменения, внесённые в репозиторий. Отображает список последних коммитов в порядке выполнения. Добавив флаг -p, можно увидеть подробные изменения, внесённые в каждый файл.

---

* git init
Создает новый локальный репозиторий git (или вновь инициализирует уже существующий). При инициализации он создаст скрытый каталог .git. В нем содержатся все объекты и ссылки, которые git использует и создаёт в истории работы над проектом.

---

* git checkout new_branch_1
или
* git checkout master

Переключает текущую ветку на new_branch_1 или master


---

* git add .
или 
* git add somefile.js
или
* git add dirname/somefile.js

добавляет содержимое рабочего каталога (или конкретного файла) в индекс (staging area) для последующего коммита.

---

* git rm
используется в Git для удаления файлов из индекса и рабочей копии.

* git rm --cached dirname/somefile.js
удаляет файл dirname/somefile.js из ИНДЕКСА git. Если сам файл не нужен, то его надо удалить отдельно:
rm dirname/somefile.js

---

* git branch -D branch_name
удаляет ЛОКАЛЬНУЮ ветку branch_name. НЕЛЬЗЯ удалить локальную ветку, находясь в ней.

---

* git commit
* git commit -m "Your short summary about the commit"

берёт все данные, добавленные в индекс с помощью git add, и сохраняет их во внутренней базе данных git, а затем сдвигает указатель текущей ветки на эту точку (этот коммит).

---

* git push --set-upstream origin new_branch_1
пушит изменения в текущей ветке (new_branch_1) на удаленный (remote) репозиторий.

---

* git clone git@github.com:anixd/web_learning.git
или
* git clone https://github.com/anixd/web_learning.git
Клонирует (создает копию) удаленный репозиторий локально.

По умолчанию реп создается в каталоге с именем репозитория, в нашем примере это web_learning

---

* git pull
Стягивает изменения из удаленного репа


